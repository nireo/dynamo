// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nireo/dynamo (interfaces: StorageEngine)
//
// Generated by this command:
//
//      mockgen . StorageEngine
//

// Package mock_dynamo is a generated GoMock package.
package dynamo

import (
        reflect "reflect"

        gomock "go.uber.org/mock/gomock"
)

// MockStorageEngine is a mock of StorageEngine interface.
type MockStorageEngine struct {
        ctrl     *gomock.Controller
        recorder *MockStorageEngineMockRecorder
}

// MockStorageEngineMockRecorder is the mock recorder for MockStorageEngine.
type MockStorageEngineMockRecorder struct {
        mock *MockStorageEngine
}

// NewMockStorageEngine creates a new mock instance.
func NewMockStorageEngine(ctrl *gomock.Controller) *MockStorageEngine {
        mock := &MockStorageEngine{ctrl: ctrl}
        mock.recorder = &MockStorageEngineMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageEngine) EXPECT() *MockStorageEngineMockRecorder {
        return m.recorder
}

// Close mocks base method.
func (m *MockStorageEngine) Close() error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Close")
        ret0, _ := ret[0].(error)
        return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageEngineMockRecorder) Close() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorageEngine)(nil).Close))
}

// Get mocks base method.
func (m *MockStorageEngine) Get(arg0 []byte) ([]byte, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Get", arg0)
        ret0, _ := ret[0].([]byte)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageEngineMockRecorder) Get(arg0 any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageEngine)(nil).Get), arg0)
}

// GetVersioned mocks base method.
func (m *MockStorageEngine) GetVersioned(arg0 []byte) ([]byte, uint64, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetVersioned", arg0)
        ret0, _ := ret[0].([]byte)
        ret1, _ := ret[1].(uint64)
        ret2, _ := ret[2].(error)
        return ret0, ret1, ret2
}

// GetVersioned indicates an expected call of GetVersioned.
func (mr *MockStorageEngineMockRecorder) GetVersioned(arg0 any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersioned", reflect.TypeOf((*MockStorageEngine)(nil).GetVersioned), arg0)
}

// Put mocks base method.
func (m *MockStorageEngine) Put(arg0, arg1 []byte) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Put", arg0, arg1)
        ret0, _ := ret[0].(error)
        return ret0
}

// Put indicates an expected call of Put.
func (mr *MockStorageEngineMockRecorder) Put(arg0, arg1 any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStorageEngine)(nil).Put), arg0, arg1)
}

// PutVersioned mocks base method.
func (m *MockStorageEngine) PutVersioned(arg0, arg1 []byte, arg2 uint64) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "PutVersioned", arg0, arg1, arg2)
        ret0, _ := ret[0].(error)
        return ret0
}

// PutVersioned indicates an expected call of PutVersioned.
func (mr *MockStorageEngineMockRecorder) PutVersioned(arg0, arg1, arg2 any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVersioned", reflect.TypeOf((*MockStorageEngine)(nil).PutVersioned), arg0, arg1, arg2)
}